apiVersion: v1
kind: ServiceAccount
metadata:
  name: score-aggregator
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: score-aggregator
  namespace: default
rules:
  # Aggregator hanya perlu baca daftar Pod (untuk node-scorer & rap-proxy)
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: score-aggregator
  namespace: default
subjects:
  - kind: ServiceAccount
    name: score-aggregator
    namespace: default
roleRef:
  kind: Role
  name: score-aggregator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: score-aggregator
  namespace: default
  labels:
    app: score-aggregator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: score-aggregator
  template:
    metadata:
      labels:
        app: score-aggregator
    spec:
      serviceAccountName: score-aggregator
      # (opsional) tempatkan di control-plane minikube
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          effect: "NoSchedule"
      containers:
        - name: api
          image: score-aggregatorv1:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
          env:
            # namespace tempat rap-proxy & node-scorer berada
            - name: NAMESPACE
              value: "default"
            # label & port untuk node-scorer (Tugas 1)
            - name: SCORER_LABEL
              value: "app=node-scorer"
            - name: SCORER_PORT
              value: "8081"
            # label & port untuk rap-proxy (penghitung traffic/RPS)
            - name: RAP_LABEL
              value: "app=rap-proxy"
            - name: RAP_PORT
              value: "8080"
            # periode scraping (detik)
            - name: SCRAPER_PERIOD
              value: "10"
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
---
apiVersion: v1
kind: Service
metadata:
  name: score-aggregator
  namespace: default
  labels:
    app: score-aggregator
spec:
  type: ClusterIP
  selector:
    app: score-aggregator
  ports:
    - name: http
      port: 80
      targetPort: http
